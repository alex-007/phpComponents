<?php
require_once 'PHPUnit/Framework.php';
require_once dirname(__FILE__) . '/../Diagram.php';

/**
 * Test class for Diagram.
 * Generated by PHPUnit on 2010-02-16 at 21:53:48.
 */
class DiagramTest extends PHPUnit_Framework_TestCase {

	/**
	 * Path to temporary directory
	 */
	const TMP = "/tmp";

	/**
	 * @var Diagram
	 */
	protected $diagram;

	protected function setUp() {
		$this->diagram = new Diagram(400, 400);
	}

	/**
	 * @covers Diagram::drawLineGraph
	 */
	public function testDrawLineGraph() {
		$this->commonFill();
		$filename = tempnam(self::TMP, "testImage");
		$this->diagram->drawLineGraph('Line', 1, true, $filename);
		$this->assertFileExists($filename);
		$hash = md5_file($filename);
		$this->assertEquals("4249add024c5a30fd3888cf20b346da9", $hash);
		unlink($filename);
	}

	/**
	 * @covers Diagram::drawBarGraph
	 */
	public function testDrawBarGraph() {
		$this->commonFill();
		$filename = tempnam(self::TMP, "testImage");
		$this->diagram->drawBarGraph(1, $filename);
		$this->assertFileExists($filename);
		$hash = md5_file($filename);
		$this->assertEquals("f4ccee0898d4158c6c4db6ec24e24942", $hash);
		unlink($filename);
	}

	/**
	 * @covers Diagram::drawPieGraph
	 */
	public function testDrawPieGraph() {
		$x = array("Jan", "Feb", "Mar", "Apr", "May");
		$y = array(
			'serie1' => array(10,20,13,44,25),
		);
		$this->assertEquals($this->diagram, $this->diagram->fillData($x, $y));
		$this->assertEquals($this->diagram, $this->diagram->setSkin('White'));

		$filename = tempnam(self::TMP, "testImage");
		$this->diagram->drawPieGraph($filename);
		$this->assertFileExists($filename);
		$hash = md5_file($filename);
		$this->assertEquals("15d1cc50aa41d9df195c9539b016face", $hash);
		unlink($filename);
	}

	/**
	 * @covers Diagram::fillData
	 * @covers Diagram::setAxisLegendNames
	 * @covers Diagram::setLegendNames
	 * @covers Diagram::setSkin
	 * @covers Diagram::setFontSizeLegend
	 * @covers Diagram::setFontSizeTreshold
	 * @covers Diagram::setShowLegends
	 * @covers Diagram::setShowTicks
	 * @covers Diagram::setValueTreshold
	 */
	private function commonFill(){
		$x = array(1,2,3,4,5,6);
		$y = array(
			'serie1' => array(1,2,3,4,5,6),
			'serie2' => array(6,5,4,3,2,1)
		);
		$this->assertEquals($this->diagram, $this->diagram->fillData($x, $y));
		$this->assertEquals($this->diagram, $this->diagram->setAxisLegendNames("X name", "Y name"));
		$this->assertEquals($this->diagram, $this->diagram->setFontSizeLegend(10));
		$this->assertEquals($this->diagram, $this->diagram->setFontSizeTreshold(8));
		$this->assertEquals($this->diagram, $this->diagram->setShowLegends(true));
		$this->assertEquals($this->diagram, $this->diagram->setShowTicks(true));
		$this->assertEquals($this->diagram, $this->diagram->setValueTreshold(3));
		$legends = array('serie1' => "Name of serie1", 'serie2' => "Name of serie2");
		$this->assertEquals($this->diagram, $this->diagram->setLegendNames($legends));
		$this->assertEquals($this->diagram, $this->diagram->setSkin('White'));
	}
}
